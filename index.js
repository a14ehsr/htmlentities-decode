// const { JSDOM } = require("jsdom");
// const dom = new JSDOM();

// if ( typeof htmlEntities == 'undefined' ) {
//   htmlEntities = function ( str, proc ) {
//     if ( 'encode' == proc ) {
//       return str.replace( /[\u0000-\uFFFF<>\&]/g, function(c) {
//         return typeof htmlEntities.entityTable[c.charCodeAt(0)] != 'undefined' ? '&'+htmlEntities.entityTable[c.charCodeAt(0)]+';' : c;
//       });
//     } else {
//       var elm = dom.window.document.createElement( 'div' );
//       str = escape( str ).replace( /%26/g,'&' ).replace( /%23/g,'#' ).replace( /%3B/g,';' );
//       elm.innerHTML = unescape( str );
//       str = elm.textContent;
//       if ( elm.innerText ) {
//         str = elm.innerText;
//         elm.innerText = '';
//       } else {
//         str = elm.textContent;
//         elm.textContent = '';
//       }
//       return str;
//     }
//   };

  htmlEntities.entityTable = {
    34 : 'quot', 
    38 : 'amp', 
    39 : 'apos', 
    60 : 'lt', 
    62 : 'gt', 
   160 : 'nbsp', 
   161 : 'iexcl', 
   162 : 'cent', 
   163 : 'pound', 
   164 : 'curren', 
   165 : 'yen', 
   166 : 'brvbar', 
   167 : 'sect', 
   168 : 'uml', 
   169 : 'copy', 
   170 : 'ordf', 
   171 : 'laquo', 
   172 : 'not', 
   173 : 'shy', 
   174 : 'reg', 
   175 : 'macr', 
   176 : 'deg', 
   177 : 'plusmn', 
   178 : 'sup2', 
   179 : 'sup3', 
   180 : 'acute', 
   181 : 'micro', 
   182 : 'para', 
   183 : 'middot', 
   184 : 'cedil', 
   185 : 'sup1', 
   186 : 'ordm', 
   187 : 'raquo', 
   188 : 'frac14', 
   189 : 'frac12', 
   190 : 'frac34', 
   191 : 'iquest', 
   192 : 'Agrave', 
   193 : 'Aacute', 
   194 : 'Acirc', 
   195 : 'Atilde', 
   196 : 'Auml', 
   197 : 'Aring', 
   198 : 'AElig', 
   199 : 'Ccedil', 
   200 : 'Egrave', 
   201 : 'Eacute', 
   202 : 'Ecirc', 
   203 : 'Euml', 
   204 : 'Igrave', 
   205 : 'Iacute', 
   206 : 'Icirc', 
   207 : 'Iuml', 
   208 : 'ETH', 
   209 : 'Ntilde', 
   210 : 'Ograve', 
   211 : 'Oacute', 
   212 : 'Ocirc', 
   213 : 'Otilde', 
   214 : 'Ouml', 
   215 : 'times', 
   216 : 'Oslash', 
   217 : 'Ugrave', 
   218 : 'Uacute', 
   219 : 'Ucirc', 
   220 : 'Uuml', 
   221 : 'Yacute', 
   222 : 'THORN', 
   223 : 'szlig', 
   224 : 'agrave', 
   225 : 'aacute', 
   226 : 'acirc', 
   227 : 'atilde', 
   228 : 'auml', 
   229 : 'aring', 
   230 : 'aelig', 
   231 : 'ccedil', 
   232 : 'egrave', 
   233 : 'eacute', 
   234 : 'ecirc', 
   235 : 'euml', 
   236 : 'igrave', 
   237 : 'iacute', 
   238 : 'icirc', 
   239 : 'iuml', 
   240 : 'eth', 
   241 : 'ntilde', 
   242 : 'ograve', 
   243 : 'oacute', 
   244 : 'ocirc', 
   245 : 'otilde', 
   246 : 'ouml', 
   247 : 'divide', 
   248 : 'oslash', 
   249 : 'ugrave', 
   250 : 'uacute', 
   251 : 'ucirc', 
   252 : 'uuml', 
   253 : 'yacute', 
   254 : 'thorn', 
   255 : 'yuml', 
   338 : 'OElig', 
   339 : 'oelig', 
   352 : 'Scaron', 
   353 : 'scaron', 
   376 : 'Yuml', 
   402 : 'fnof', 
   710 : 'circ', 
   732 : 'tilde', 
   913 : 'Alpha', 
   914 : 'Beta', 
   915 : 'Gamma', 
   916 : 'Delta', 
   917 : 'Epsilon', 
   918 : 'Zeta', 
   919 : 'Eta', 
   920 : 'Theta', 
   921 : 'Iota', 
   922 : 'Kappa', 
   923 : 'Lambda', 
   924 : 'Mu', 
   925 : 'Nu', 
   926 : 'Xi', 
   927 : 'Omicron', 
   928 : 'Pi', 
   929 : 'Rho', 
   931 : 'Sigma', 
   932 : 'Tau', 
   933 : 'Upsilon', 
   934 : 'Phi', 
   935 : 'Chi', 
   936 : 'Psi', 
   937 : 'Omega', 
   945 : 'alpha', 
   946 : 'beta', 
   947 : 'gamma', 
   948 : 'delta', 
   949 : 'epsilon', 
   950 : 'zeta', 
   951 : 'eta', 
   952 : 'theta', 
   953 : 'iota', 
   954 : 'kappa', 
   955 : 'lambda', 
   956 : 'mu', 
   957 : 'nu', 
   958 : 'xi', 
   959 : 'omicron', 
   960 : 'pi', 
   961 : 'rho', 
   962 : 'sigmaf', 
   963 : 'sigma', 
   964 : 'tau', 
   965 : 'upsilon', 
   966 : 'phi', 
   967 : 'chi', 
   968 : 'psi', 
   969 : 'omega', 
   977 : 'thetasym', 
   978 : 'upsih', 
   982 : 'piv', 
  8194 : 'ensp', 
  8195 : 'emsp', 
  8201 : 'thinsp', 
  8204 : 'zwnj', 
  8205 : 'zwj', 
  8206 : 'lrm', 
  8207 : 'rlm', 
  8211 : 'ndash', 
  8212 : 'mdash', 
  8216 : 'lsquo', 
  8217 : 'rsquo', 
  8218 : 'sbquo', 
  8220 : 'ldquo', 
  8221 : 'rdquo', 
  8222 : 'bdquo', 
  8224 : 'dagger', 
  8225 : 'Dagger', 
  8226 : 'bull', 
  8230 : 'hellip', 
  8240 : 'permil', 
  8242 : 'prime', 
  8243 : 'Prime', 
  8249 : 'lsaquo', 
  8250 : 'rsaquo', 
  8254 : 'oline', 
  8260 : 'frasl', 
  8364 : 'euro', 
  8465 : 'image', 
  8472 : 'weierp', 
  8476 : 'real', 
  8482 : 'trade', 
  8501 : 'alefsym', 
  8592 : 'larr', 
  8593 : 'uarr', 
  8594 : 'rarr', 
  8595 : 'darr', 
  8596 : 'harr', 
  8629 : 'crarr', 
  8656 : 'lArr', 
  8657 : 'uArr', 
  8658 : 'rArr', 
  8659 : 'dArr', 
  8660 : 'hArr', 
  8704 : 'forall', 
  8706 : 'part', 
  8707 : 'exist', 
  8709 : 'empty', 
  8711 : 'nabla', 
  8712 : 'isin', 
  8713 : 'notin', 
  8715 : 'ni', 
  8719 : 'prod', 
  8721 : 'sum', 
  8722 : 'minus', 
  8727 : 'lowast', 
  8730 : 'radic', 
  8733 : 'prop', 
  8734 : 'infin', 
  8736 : 'ang', 
  8743 : 'and', 
  8744 : 'or', 
  8745 : 'cap', 
  8746 : 'cup', 
  8747 : 'int', 
  8756 : 'there4', 
  8764 : 'sim', 
  8773 : 'cong', 
  8776 : 'asymp', 
  8800 : 'ne', 
  8801 : 'equiv', 
  8804 : 'le', 
  8805 : 'ge', 
  8834 : 'sub', 
  8835 : 'sup', 
  8836 : 'nsub', 
  8838 : 'sube', 
  8839 : 'supe', 
  8853 : 'oplus', 
  8855 : 'otimes', 
  8869 : 'perp', 
  8901 : 'sdot', 
  8968 : 'lceil', 
  8969 : 'rceil', 
  8970 : 'lfloor', 
  8971 : 'rfloor', 
  9001 : 'lang', 
  9002 : 'rang', 
  9674 : 'loz', 
  9824 : 'spades', 
  9827 : 'clubs', 
  9829 : 'hearts', 
  9830 : 'diams', 
  };
}

// var str = " <>&\"'ˆ^˜~–—¢£¥€©®™ƒŒœ•…‘†‰α⁄←♠1Aaあｱ一𡈽";
// console.log( htmlEntities( str, 'encode' ) );
// //  &lt;&gt;&amp;&quot;&apos;&circ;^&tilde;~&ndash;&mdash;&cent;&pound;&yen;&euro;&copy;&reg;&trade;&fnof;&OElig;&oelig;&bull;&hellip;&lsquo;&dagger;&permil;&alpha;&frasl;&larr;&spades;1Aaあｱ一𡈽

// var entity = ' &lt;&gt;&amp;&quot;&apos;&circ;^&tilde;~&ndash;&mdash;&cent;&pound;&yen;&euro;&copy;&reg;&trade;&fnof;&OElig;&oelig;&bull;&hellip;&lsquo;&dagger;&permil;&alpha;&frasl;&larr;&spades;1Aaあｱ一𡈽';
// console.log( htmlEntities( entity, 'decode' ) );
// //  <>&"'ˆ^˜~–—¢£¥€©®™ƒŒœ•…‘†‰α⁄←♠1Aaあｱ一𡈽




originalList = [
  "&",
  "¦",
  "µ",
  "‰",
  "¤",
  "€",
  "¢",
  "£",
  "¥",
  "©",
  "®",
  "™",
  "↑",
  "→",
  "↓",
  "←",
  "↔",
  "↵",
  "⇑",
  "⇒",
  "⇓",
  "⇐",
  "⇔",
  "♠",
  "♣",
  "♥",
  "♦",
  "ª",
  "º",
  "¹",
  "²",
  "³",
  "½",
  "¼",
  "¾",
  "·",
  "¡",
  "¿",
  '"',
  "‘",
  "’",
  "“",
  "”",
  "«",
  "»",
  " ",
  " ",
  " ",
  " ",
  "—",
  "–",
  "­",
  "•",
  "¶",
  "§",
  "†",
  "‡",
  "…",
  "◊",
  "‾",
  "⁄",
  "∞",
  "√",
  "−",
  "±",
  "×",
  "÷",
  "≠",
  "≈",
  "≅",
  ">",
  "<",
  "≥",
  "≤",
  "ƒ",
  "∝",
  "′",
  "″",
  "∫",
  "∂",
  "∇",
  "∑",
  "∏",
  "ℑ",
  "ℜ",
  "℘",
  "∼",
  "∴",
  "ϖ",
  "∠",
  "°",
  "⊥",
  "≡",
  "¬",
  "∀",
  "∃",
  "∧",
  "∨",
  "∅",
  "∩",
  "∪",
  "∈",
  "∉",
  "∋",
  "⊂",
  "⊃",
  "⊄",
  "⊆",
  "⊇",
  "⋅",
  "∗",
  "⊕",
  "⊗",
  "⌈",
  "⌊",
  "⌉",
  "⌋",
];

convert1 = [
  "&amp;",
  "&brvbar;",
  "&micro;",
  "&permil;",
  "&curren;",
  "&euro;",
  "&cent;",
  "&pound;",
  "&yen;",
  "&copy;",
  "&reg;",
  "&trade;",
  "&uarr;",
  "&rarr;",
  "&darr;",
  "&larr;",
  "&harr;",
  "&crarr;",
  "&uArr;",
  "&rArr;",
  "&dArr;",
  "&lArr;",
  "&hArr;",
  "&spades;",
  "&clubs;",
  "&hearts;",
  "&diams;",
  "&ordf;",
  "&ordm;",
  "&sup1;",
  "&sup2;",
  "&sup3;",
  "&frac12;",
  "&frac14;",
  "&frac34;",
  "&middot;",
  "&iexcl;",
  "&iquest;",
  "&quot;",
  "&lsquo;",
  "&rsquo;",
  "&ldquo;",
  "&rdquo;",
  "&laquo;",
  "&raquo;",
  "&nbsp;",
  "&emsp;",
  "&ensp;",
  "&thinsp;",
  "&mdash;",
  "&ndash;",
  "&shy;",
  "&bull;",
  "&para;",
  "&sect;",
  "&dagger;",
  "&Dagger;",
  "&hellip;",
  "&loz;",
  "&oline;",
  "&frasl;",
  "&infin;",
  "&radic;",
  "&minus;",
  "&plusmn;",
  "&times;",
  "&divide;",
  "&ne;",
  "&asymp;",
  "&cong;",
  "&gt;",
  "&lt;",
  "&ge;",
  "&le;",
  "&fnof;",
  "&prop;",
  "&prime;",
  "&Prime;",
  "&int;",
  "&part;",
  "&nabla;",
  "&sum;",
  "&prod;",
  "&image;",
  "&real;",
  "&weierp;",
  "&sim;",
  "&there4;",
  "&piv;",
  "&ang;",
  "&deg;",
  "&perp;",
  "&equiv;",
  "&not;",
  "&forall;",
  "&exist;",
  "&and;",
  "&or;",
  "&empty;",
  "&cap;",
  "&cup;",
  "&isin;",
  "&notin;",
  "&ni;",
  "&sub;",
  "&sup;",
  "&nsub;",
  "&sube;",
  "&supe;",
  "&sdot;",
  "&lowast;",
  "&oplus;",
  "&otimes;",
  "&lceil;",
  "&lfloor;",
  "&rceil;",
  "&rfloor;"
];

convert2 = [
  "&#38;",
  "&#166;",
  "&#181;",
  "&#8240;",
  "&#164;",
  "&#128;",
  "&#162;",
  "&#163;",
  "&#165;",
  "&#169;",
  "&#174;",
  "&#8482;",
  "&#8593;",
  "&#8594;",
  "&#8595;",
  "&#8592;",
  "&#8596;",
  "&#8629;",
  "&#8657;",
  "&#8658;",
  "&#8659;",
  "&#8656;",
  "&#8660;",
  "&#9824;",
  "&#9827;",
  "&#9829;",
  "&#9830;",
  "&#170;",
  "&#186;",
  "&#185;",
  "&#178;",
  "&#179;",
  "&#189;",
  "&#188;",
  "&#190;",
  "&#183;",
  "&#161;",
  "&#191;",
  "&#34;",
  "&#8216;",
  "&#8217;",
  "&#8220;",
  "&#8221;",
  "&#171;",
  "&#187;",
  "&#160;",
  "&#8195;",
  "&#8194;",
  "&#8201;",
  "&#8212;",
  "&#8211;",
  "&#173;",
  "&#8226;",
  "&#182;",
  "&#167;",
  "&#8224;",
  "&#8225;",
  "&#8230;",
  "&#9674;",
  "&#8254;",
  "&#8260;",
  "&#8734;",
  "&#8730;",
  "&#8722;",
  "&#177;",
  "&#215;",
  "&#247;",
  "&#8800;",
  "&#8776;",
  "&#8773;",
  "&#62;",
  "&#60;",
  "&#8805;",
  "&#8804;",
  "&#402;",
  "&#8733;",
  "&#8242;",
  "&#8243;",
  "&#8747;",
  "&#8706;",
  "&#8711;",
  "&#8721;",
  "&#8719;",
  "&#8465;",
  "&#8476;",
  "&#8472;",
  "&#8764;",
  "&#8756;",
  "&#982;",
  "&#8736;",
  "&#176;",
  "&#8869;",
  "&#8801;",
  "&#172;",
  "&#8704;",
  "&#8707;",
  "&#8743;",
  "&#8744;",
  "&#8709;",
  "&#8745;",
  "&#8746;",
  "&#8712;",
  "&#8713;",
  "&#8715;",
  "&#8834;",
  "&#8835;",
  "&#8836;",
  "&#8838;",
  "&#8839;",
  "&#8901;",
  "&#8727;",
  "&#8853;",
  "&#8855;",
  "&#8968;",
  "&#8970;",
  "&#8969;",
  "&#8971;",
];

const unescape = require('lodash.unescape');
const {decode} = 'html-entities';

convert1.forEach((el, index) => {
  // console.log(el, htmlEntities(el, 'decode'), originalList[index], originalList[index] === htmlEntities(el, 'decode'));
  // console.log(el, unescape(el), originalList[index], originalList[index] === unescape(el));
  console.log(el, decode(el), originalList[index], originalList[index] === decode(el));
  // console.log( htmlEntities( entity, 'decode' ) );
});


